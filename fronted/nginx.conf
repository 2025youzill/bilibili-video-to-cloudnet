# HTTP服务器 - ACME校验与跳转到HTTPS
server {
    listen 80;
    server_name youzill.top;

    # ACME 验证路径（Let's Encrypt）- 使用 ^~ 提高优先级，避免被重定向捕获
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/html;
        default_type text/plain;
        try_files $uri =404;
    }

    # 其余请求才重定向到 HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS服务器
server {
    listen 443 ssl http2;
    server_name youzill.top;

    # SSL证书配置（使用新签发的证书路径）
    ssl_certificate /etc/nginx/ssl/live/youzill.top-0001/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/youzill.top-0001/privkey.pem;
    
    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HTTPS 同样放行 ACME 验证路径（使用 ^~ 并显式 try_files）
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/html;
        default_type text/plain;
        try_files $uri =404;
    }

    # 安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    root /usr/share/nginx/html;
    index index.html;

    # 启用gzip压缩
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 缓存静态资源
    location ~* \.((js|css|png|jpg|jpeg|gif|ico|svg))$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # 处理 /youzill/bvtc 路径
    location /youzill/bvtc {
        alias /usr/share/nginx/html;
        try_files $uri $uri/ /youzill/bvtc/index.html;
        
        # 处理前端路由
        location ~ ^/youzill/bvtc/(.*)$ {
            try_files $uri $uri/ /youzill/bvtc/index.html;
        }
    }

    # 处理CORS预检请求与反代后端
    location /youzill/bvtc/api/ {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
        
        # 确保POST请求的请求体正确传递
        client_max_body_size 10M;
        client_body_buffer_size 128k;
        
        # 移除 /youzill/bvtc 前缀后转发给后端
        rewrite ^/youzill/bvtc/api/(.*)$ /api/$1 break;
        proxy_pass http://banked:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        
        # 确保请求体正确传递
        proxy_request_buffering on;
        proxy_buffering on;
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    # 根路径重定向到 /youzill/bvtc
    location = / {
        return 301 https://$server_name/youzill/bvtc;
    }

    # 错误页面
    error_page 404 /youzill/bvtc/index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}